// Binary Tree:
//      1            <---
//    /   \
//   2     3         <---
//    \    \ 
//    5     4        <---
// Result: [1, 3, 4]

TNode {
  int val;
  TNode left;
  TNode right;
}

Pre - node - left - right

M Pre => mode right - left




int maxDepth = -1;

private List<Integer> getRightView(TNode root) {
  
  if(root == null) {
    return Collections.emptyList(); 
  }
  
  List<Integer> result = new ArrayList<>();
  helper(root, result, 0);
  return result;
}

private void helper(TNode node, List<Integer> result, int depth) {
  
  if(node == null) {
    return;  
  }
  
  if(depth > maxDepth) {
    result.add(node.val);
    maxDepth = depth;
  }
  
  helper(node.right, result, depth+1);
  helper(node.left, result, depth+1);  
}


//Test cases
1. null node to getRightView


// O O O O O
// O O O O O
// O O X O O
// O R X O O
// O O X O T

// Find out minimum number of steps needed by the robot to reach the target

// 




R = 3,1
T = 4,4

  row ++
  column ++
  
  DFS
  BFS //useful
  
  
  
public int getMinSteps(int[][] input, Cell start, Cell end) {

  //validation
  //start and end within array
  int rows = input.length;
  inr columns = input[0].length;
  
  
  Queue<CellWithSteps> pq = new PriorityQueue<>(new CellComparator());
  pq.add(new CellWithSteps(start.row, start.col, 0));
  
  
  boolean[][] traversed = new boolean[rows][columns];
  traversed[start.row][start.col] = true;
  
  while(!pq.isEmpty()) {
    
    CellWithSteps currentCell = pq.poll();
    if(currentCell.row = end.row && currentCell.col == end.col) {
      return currentCell.steps;
    }
    
    
  
  
  
  }
  
  return -1;
  
}

private List<Cell> getAllowedMoved(int currentRow, int currentCol, boolean[][] traversed) {
  
  List<Cell> moves = new ArrayList<>();
  
  for(int[] move : movesAllowed) {
    int newRow = currentRow + move[0];
    int newCol = currentCol + move[1];
    
    if(isMovementAllowed(newRow, newCol, traversed)) {
      
    }
    
  }

}

private boolean isMovementAllowed(int row, int col, boolean[][] traversed) {
  
  if(row >= 0 && row < traversed.length && col >= 0 && col < traversed[0].length && traversed[row][col]== false) {
    return true;
  }
  return false;

}


int[][] movesAllowed = new int[][] {

  {0, 1},
  {0, -1}
  {1, 0},
  {-1, 0}

};




class Cell {
  int row;
  int col;
  
  //
}

class CellWithSteps {
  int row;
  int col;
  int steps; 
}

class CellComparator implements Comparator<CellWithSteps> {
  
  public int compare(CellWithSteps c1, CellWithSteps c2) {
    return c1.steps - c2.steps; 
  }

}
