// mtgs = [[0,2], [4,8], [5,7], [9,12]]
// # = 2


// class Meeting {
//   double start;
//   double end;
// }
// 
// Given person A and Bâ€™s schedule today, find their busy time.
// Note: Busy time means A or B, or both are in a meeting. 
//            e.g. meetingA = [1,4], meetingB = [2,5] ==> BusyTime = [1,5]
// 
// - For a given person, all meetings are not conflicting with each other
// - All meetings are sorted by the start time.
//
// Example:
// A = [[1, 2], [4, 6], [9, 12]]  => m
// B = [[0, 2], [5, 8]]           => n
// Busy = [[0,2], [4,8], [9,12]]


A = [1,3]
B = [0,2]

==> C = [0,3]

----

C = [0,3]


public List<Meeting> getBusySchedule(List<Meeting> aMeetings, List<Meeting> bMeetings) {
  
 //validation both meeting list are not null; /.... throw illegalArgumentExcption
  
  List<Meeting> result = new ArrayList<>();
  
  int aIndex = 0;
  int bIndex = 0;
  
  int start = 0;
  
  while(aIndex < aMeetings.size() && bIndex < bMeetings.size()) {
    
    Meeting aMeeting = aMeetings.get(aIndex);  //9,12
    Meeting bMeeting = bMeetings.get(bIndex);  //5,8
    
    if(result.size() == 0) {
      start = Math.min(aMeeting.start, bMeeting.start);
      
      if(start == aMeeting.start) {
        aIndex++;
        result.add(aMeeting);
      } else {
        bIndex++;
        result.add(bMeeting);
      }
      continue;
    }
    
    // 0,2 .... 4,8
    Meeting lastMeetingInList = result.get(result.size()-1);  //0,2
    
    if(aMeeting.start <= lastMeetingInList.end) {
       
       lastMeetingInList.end = Math.max(lastMeetingInList.end, aMeeting.end);
        aIndex++;
    } else if (bMeeting.start <= lastMeetingInList.end) {
       
       lastMeetingInList.end = Math.max(lastMeetingInList.end, bMeeting.end);
        bIndex++;
    } else {
      
      start = Math.min(aMeeting.start, bMeeting.start);
      
      if(start == aMeeting.start) {
        aIndex++;
        result.add(aMeeting); //4,6
      } else {
        bIndex++;
        result.add(bMeeting);
      }
            
    }

  }
  
  
  if(aIndex != aMeeting.size()) {
    while (aIndex < aMeeting.size()) {   // 9,12
     result.add(aMeeting.get(aIndex++);
                
    }
  }
                
  if(bIndex != bMeeting.size()) {
    while (bIndex < bMeeting.size()) {
     result.add(bMeeting.get(bIndex++);
    }
  }
  // 0,2 .... 4,8 ....9,12
  
  return result;
  
  
  
}