package com.mohit.binary_search;

import static org.junit.Assert.assertEquals;

public class ShipCapacity {

    public void execute() {

        assertEquals(15, shipWithinDays(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 5));

        assertEquals(55, shipWithinDays(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 1));

        assertEquals(691,
                shipWithinDays(new int[] { 474, 173, 211, 425, 392, 289, 64, 319, 271, 241, 113, 82, 13, 418, 498, 248, 304, 15, 41, 94, 377, 47, 35, 190, 246, 117, 111, 20, 376, 3, 226, 298, 274,
                        379, 221, 169, 421, 169, 70, 499, 230, 259, 136, 132, 163, 67, 266, 240, 418, 469, 464, 420, 172, 235, 246, 280, 227, 115, 415, 159, 197, 460, 411, 3, 43, 245, 261, 329, 391,
                        480, 306, 499, 178, 252, 248, 40, 222, 364, 228, 406, 285, 458, 149, 281, 473, 97, 234, 486, 86, 344, 156, 85, 387, 181, 173, 287, 489, 38, 158, 12, 294, 211, 275, 454, 79,
                        249, 366, 220, 339, 461, 91, 32, 222, 259, 258, 50, 123, 175, 43, 314, 458, 364, 206, 234, 78, 400, 181, 342, 136, 298, 245, 494, 167, 416, 113, 212, 346, 93, 248, 295, 285,
                        296, 95, 393, 440, 195, 489, 98, 174, 205, 154, 82, 107, 240, 269, 283, 179, 463, 26, 125, 113, 366, 304, 96, 100, 473, 168, 345, 346, 1, 348, 450, 168, 55, 393, 321, 195, 194,
                        146, 481, 334, 337, 434, 85, 378, 175, 50, 183, 376, 118, 216, 247, 155, 324, 477, 497, 483, 417, 312, 194, 199, 131, 353, 471, 396, 313, 248, 337, 308, 68, 331, 295, 164, 329,
                        479, 448, 414, 273, 439, 270, 335, 471, 395, 172, 326, 98, 47, 457, 180, 468, 222, 406, 450, 221, 484, 444, 446, 286, 452, 479, 478, 226, 118, 345, 251, 176, 437, 473, 395,
                        158, 230, 357, 124, 500, 296, 240, 211, 499, 231, 324, 413, 287, 113, 489, 357, 278, 307, 420, 125, 242, 33, 337, 497, 231, 6, 330, 463, 194, 461, 38, 125, 487, 279, 394, 233,
                        300, 342, 388, 56, 216, 271, 75, 108, 141, 93, 40, 482, 294, 228, 79, 165, 494, 92, 295, 169, 7, 135, 210, 8, 488, 102, 46, 277, 267, 364, 207, 500, 319, 221, 391, 27, 20, 405,
                        384, 208, 66, 119, 185, 33, 482, 222, 162, 106, 285, 139, 383, 414, 490 }, 169));

        assertEquals(688,
                shipWithinDays(new int[] { 376, 80, 176, 64, 421, 250, 163, 252, 490, 229, 408, 179, 106, 185, 108, 483, 349, 206, 76, 127, 112, 384, 170, 125, 52, 111, 457, 326, 387, 140, 9, 205,
                        462, 453, 464, 464, 89, 17, 362, 290, 102, 278, 462, 343, 69, 430, 19, 476, 461, 270, 180, 148, 454, 422, 460, 20, 150, 271, 143, 491, 120, 111, 291, 383, 364, 101, 100, 38, 9,
                        306, 185, 326, 189, 325, 372, 74, 329, 240, 114, 154, 6, 257, 172, 355, 337, 186, 87, 377, 391, 453, 309, 47, 234, 257, 434, 338, 418, 207, 176, 403, 497, 201, 147, 164, 92,
                        451, 211, 135, 28, 73, 25, 223, 134, 418, 481, 81, 191, 268, 146, 452, 177, 158, 8, 169, 208, 149, 325, 472, 141, 423, 197, 241, 250, 423, 139, 101, 264, 94, 73, 454, 160, 256,
                        204, 354, 103, 281, 425, 413, 158, 93, 477, 330, 183, 285, 335, 370, 146, 135, 440, 496, 264, 97, 474, 190, 307, 142, 202, 95, 92, 56, 152, 108, 12, 109, 247, 191, 8, 11, 398,
                        279, 1, 240, 129, 349, 301, 482, 194, 164, 424, 43, 420, 355, 355, 294, 203, 485, 141, 124, 98, 128, 333, 85, 19, 39, 221, 329, 155, 207, 270, 191, 416, 395, 61, 85, 357, 400,
                        143, 337, 445, 177, 98, 150, 112, 195, 319, 21, 488, 407, 130, 133, 398, 55, 433, 307, 303, 297, 381, 234, 287, 257, 347, 25, 237, 5, 325, 112, 285, 132, 318, 427, 421, 448,
                        65, 259, 304, 78, 327, 490, 166, 27, 256, 139, 294, 361, 42, 52, 95, 122, 422, 442, 271, 441, 133, 397, 375, 186, 464, 314, 453, 183, 425, 431, 241, 22, 80, 490, 476, 232, 359,
                        65, 288, 361, 218, 480, 290, 389, 243, 343, 427, 404, 87, 149, 208, 479, 243, 312, 185, 469, 421, 305, 466, 335, 332, 117, 265, 409, 199, 47, 317, 355, 267, 279, 6, 429, 404,
                        211, 167, 75, 384, 360, 287, 137, 453, 361, 152, 283, 46, 208, 195, 207, 405, 412, 354, 278, 464, 381, 333, 487, 183, 311, 226, 225, 55, 451, 461, 263, 143, 160, 212, 451, 250,
                        296, 155, 424, 114, 296, 125, 470, 284, 443, 430, 494, 238, 144, 176, 180, 91, 500, 10, 339, 379, 189, 375, 388, 492, 461, 267, 104, 334, 167, 53, 93, 500, 445, 196, 89, 72,
                        409, 395, 415, 219, 157, 161, 88, 71, 98, 361, 31, 387, 216, 182, 110, 362, 437, 452, 495, 409, 74, 442, 3, 229, 197, 191, 78, 206, 69, 133, 217, 278, 436, 112, 11, 354, 496,
                        88, 164, 256, 103, 126, 293, 292, 20, 355, 458, 227, 467, 170, 431, 70, 404, 421, 56, 144, 73, 148, 105, 328, 51, 134, 426, 80, 18, 118, 440, 194, 158, 323, 366, 313, 162, 500,
                        297, 448, 217, 49, 333, 499, 124, 280, 230, 476, 73, 337, 487, 271, 499, 498, 98, 331, 76, 408, 338, 159, 154, 104, 208, 185, 250, 98, 479, 171, 360, 150, 112, 305, 177, 454,
                        102, 212, 43, 302, 123, 418, 124, 12, 133, 339, 244, 380, 254, 318, 107, 277, 149, 58, 268, 378, 98, 337, 56, 130, 470, 393, 459, 177, 468, 142, 498, 140, 490, 189, 380, 20,
                        338, 452, 330, 376, 409, 279, 50, 311, 219, 373, 312, 383, 105, 25, 268, 21, 278, 13, 181, 370, 191, 131, 233, 123, 375, 419, 403, 466, 11, 438, 91, 71, 455, 122, 382, 468,
                        479, 328, 135, 5, 467, 448, 311, 497, 400, 260, 310, 427, 349, 182, 152, 7, 62, 133, 225, 354, 40, 100, 313, 289, 195, 392, 249, 318, 287, 457, 387, 361, 136, 460, 243, 236,
                        50, 412, 440, 124, 93, 376, 95, 350, 430, 390, 149, 203, 440, 252, 32, 461, 300, 426, 170, 495, 217, 269, 57, 257, 105, 179, 380, 301, 58, 325, 440, 144, 102, 455, 352, 455,
                        80, 300, 370, 58, 393, 239, 380, 104, 364, 467, 136, 296, 169, 364, 224, 394, 338, 39, 319, 428, 81, 194, 314, 370, 143, 162, 472, 415, 149, 315, 318, 74, 258, 496, 475, 377,
                        346, 20, 14, 417, 26, 362, 295, 388, 493, 370, 249, 13, 488, 54, 195, 72, 263, 194, 155, 459, 250, 39, 210, 455, 86, 340, 6, 105, 297, 196, 23, 217, 333, 434, 129 }, 361));

        System.out.println("All test Cases Passed " + this.getClass().getSimpleName());

    }

    public int shipWithinDays(int[] weights, int D) {

        if (weights.length == 0 || D < 1) {
            return 0;
        }
        
        if(weights.length == 1) {
            return weights[0];
        }

        int totalWeight = 0;
        int maxWeight = 0;
        for (int index = 0; index < weights.length; index++) {
            totalWeight += weights[index];
            if (weights[index] > maxWeight) {
                maxWeight = weights[index];
            }
        }

        if(weights.length == D) {
            return maxWeight;
        }
        
        int atleast = Math.max(maxWeight, totalWeight/D);

        return getOptimumValue(weights, atleast, totalWeight - D + 1, D);
    }

    private int getOptimumValue(int[] weights, int start, int end, int days) {
        int result = Integer.MAX_VALUE;
        while (true) {
            if (start > end) {
                break;
            }
            int mid = start + (end - start) / 2;

            int isBest = isBest(weights, mid, days);

            if (isBest >= 0) { // Days are remaining .. scope to reduce
                result = Math.min(mid, result);
                end = mid - 1;
            } else if (isBest < 0) { // Days are less .. need to increase
                start = mid + 1;
            }            
        }
        return result;
    }

    private int isBest(int[] weights, int maxLimit, int days) {
        int tw = 0;
        int remainingDays = days - 1;
        for (int i = 0; i < weights.length; i++) {
            tw += weights[i];
            if (tw > maxLimit) {
                remainingDays--;
                tw = weights[i];
            }
        }
        return remainingDays;
    }

}